-- local dap = require("dap")
--
-- dap.adapters.node2 = {
-- 	type = "executable",
-- 	command = "node",
-- 	args = { os.getenv("HOME") .. "/dev/microsoft/vscode-node-debug2/out/src/nodeDebug.js" },
-- }
--
-- local commonJsConfig = {
-- 	{
-- 		name = "Launch",
-- 		type = "node2",
-- 		request = "launch",
-- 		program = "${file}",
-- 		cwd = vim.fn.getcwd(),
-- 		sourceMaps = true,
-- 		protocol = "inspector",
-- 		console = "integratedTerminal",
-- 	},
-- 	{
-- 		-- For this to work you need to make sure the node process is started with the `--inspect` flag.
-- 		name = "Attach to process",
-- 		type = "node2",
-- 		request = "attach",
-- 		processId = require("dap.utils").pick_process,
-- 	},
-- }
--
-- dap.configurations.javascript = commonJsConfig
-- dap.configurations.typescript = commonJsConfig
--
-- -- local jester = require("jester")
-- -- jester.setup({
-- -- 	-- cmd = "./node_modules/.bin/jest --runInBand --testNamePattern '$result' --testPathPattern $file", -- run command
-- -- 	cmd = "node --inspect-brk ./node_modules/.bin/jest --runInBand --testNamePattern '$result' --testPathPattern $file", -- run command
-- -- 	identifiers = { "test", "it" }, -- used to identify tests
-- -- 	prepend = { "describe" }, -- prepend describe blocks
-- -- 	expressions = { "call_expression" }, -- tree-sitter object used to scan for tests/describe blocks
-- -- 	path_to_jest_run = "node_modules/.bin/jest", -- used to run tests
-- -- 	path_to_jest_debug = "./node_modules/.bin/jest", -- used for debugging
-- -- 	terminal_cmd = ':split test | execute "normal \\<C-W>J" | terminal', -- used to spawn a terminal for running tests, for debugging refer to nvim-dap's config
-- -- 	-- path_to_config = "jest.config.ts",
-- -- 	-- NOT WORKING CORRECTLY, JUST ATTACH TO PROCESS
-- -- 	-- dap = { -- debug adapter configuration
-- -- 	-- 	type = "node2",
-- -- 	-- 	request = "launch",
-- -- 	-- 	cwd = vim.fn.getcwd(),
-- -- 	-- 	runtimeArgs = { "--inspect-brk", "$path_to_jest", "--no-coverage", "-t", "$result", "--", "$file" },
-- -- 	-- 	args = { "--no-cache" },
-- -- 	-- 	sourceMaps = false,
-- -- 	-- 	protocol = "inspector",
-- -- 	-- 	skipFiles = { "<node_internals>/**/*.js" },
-- -- 	-- 	console = "integratedTerminal",
-- -- 	-- 	port = 9229,
-- -- 	-- 	disableOptimisticBPs = true,
-- -- 	-- },
-- -- })
--
-- -- UI FOR DAP
-- local dapui = require("dapui")
-- dapui.setup({
-- 	icons = { expanded = "", collapsed = "", current_frame = "" },
-- 	mappings = {
-- 		-- Use a table to apply multiple mappings
-- 		expand = { "<CR>", "<2-LeftMouse>" },
-- 		open = "o",
-- 		remove = "d",
-- 		edit = "e",
-- 		repl = "r",
-- 		toggle = "t",
-- 	},
-- 	-- Use this to override mappings for specific elements
-- 	element_mappings = {
-- 		-- Example:
-- 		-- stacks = {
-- 		--   open = "<CR>",
-- 		--   expand = "o",
-- 		-- }
-- 	},
-- 	expand_lines = true,
-- 	-- Layouts define sections of the screen to place windows.
-- 	-- The position can be "left", "right", "top" or "bottom".
-- 	-- The size specifies the height/width depending on position. It can be an Int
-- 	-- or a Float. Integer specifies height/width directly (i.e. 20 lines/columns) while
-- 	-- Float value specifies percentage (i.e. 0.3 - 30% of available lines/columns)
-- 	-- Elements are the elements shown in the layout (in order).
-- 	-- Layouts are opened in order so that earlier layouts take priority in window sizing.
-- 	layouts = {
-- 		{
-- 			elements = {
-- 				-- Elements can be strings or table with id and size keys.
-- 				{ id = "scopes", size = 0.25 },
-- 				"breakpoints",
-- 				"stacks",
-- 				"watches",
-- 			},
-- 			size = 40, -- 40 columns
-- 			position = "left",
-- 		},
-- 		{
-- 			elements = {
-- 				"repl",
-- 				"console",
-- 			},
-- 			size = 0.25, -- 25% of total lines
-- 			position = "bottom",
-- 		},
-- 	},
-- 	controls = {
-- 		-- Requires Neovim nightly (or 0.8 when released)
-- 		enabled = true,
-- 		-- Display controls in this element
-- 		element = "repl",
-- 		icons = {
-- 			pause = "",
-- 			play = "",
-- 			step_into = "",
-- 			step_over = "",
-- 			step_out = "",
-- 			step_back = "",
-- 			run_last = "",
-- 			terminate = "",
-- 		},
-- 	},
-- 	floating = {
-- 		max_height = nil, -- These can be integers or a float between 0 and 1.
-- 		max_width = nil, -- Floats will be treated as percentage of your screen.
-- 		border = "single", -- Border style. Can be "single", "double" or "rounded"
-- 		mappings = {
-- 			close = { "q", "<Esc>", "<Ctrl-c>" },
-- 		},
-- 	},
-- 	windows = { indent = 1 },
-- 	render = {
-- 		max_type_length = nil, -- Can be integer or nil.
-- 		max_value_lines = 100, -- Can be integer or nil.
-- 	},
-- })
--
-- -- automatically open dapui on attach
-- dap.listeners.after.event_initialized["dapui_config"] = function()
-- 	dapui.open()
-- end
-- dap.listeners.before.event_terminated["dapui_config"] = function()
-- 	dapui.close()
-- end
-- dap.listeners.before.event_exited["dapui_config"] = function()
-- 	dapui.close()
-- end
--
-- vim.keymap.set("n", "<leader>ts", jester.run)
